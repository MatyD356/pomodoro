{"version":3,"sources":["components/Clock.js","components/Config.js","App.js","serviceWorker.js","index.js"],"names":["Clock","className","id","this","props","onGoing","min","sec","onClick","startStop","reset","React","Component","Config","sendClick","e","configSession","target","sessionTime","breakTime","App","intervalID","clearInterval","setState","active","minutes","seconds","stopAudio","configTime","childdata","state","updateTime","updateBreakTime","sesionInter","playAudio","setInterval","breakInter","console","log","document","getElementById","play","audio","duration","paused","pause","currentTime","script","createElement","async","src","body","appendChild","preload","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5d38837.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.scss';\n\nclass Clock extends React.Component {\n    render() {\n        return (\n            <div className=\"Clock\">\n                <div id=\"timer-label\" className=\"clock-container\">\n                    <h2 className=\"clockTitle\">{this.props.onGoing}</h2>\n                    <div id=\"time-left\" className=\"time-left\">\n                        {this.props.min < 10 ? `0${this.props.min}` : this.props.min}:\n                        {this.props.sec < 10 ? `0${this.props.sec}` : this.props.sec}</div>\n                    <div className=\"control-buttons\">\n                        <button id=\"start_stop\" onClick={this.props.startStop}>Start/Stop</button><br />\n                        <button id=\"reset\" onClick={this.props.reset}> Reset</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Clock;","import React from 'react';\nimport '../App.scss';\n\nclass Config extends React.Component {\n    sendClick = (e) => {\n        this.props.configSession(e.target.id)\n    }\n    render() {\n        return (\n            <div className=\"Config\">\n                <div id=\"break-label\">\n                    <h2 className=\"session-title\">Session</h2>\n                    <div className=\"config-container\">\n                        <p\n                            className=\"plus\"\n                            id=\"session-increment\"\n                            onClick={this.sendClick} >\n                            +\n                        </p>\n                        <p id=\"session-length\">{this.props.sessionTime}</p>\n                        <p\n                            className=\"minus\"\n                            id=\"session-decrement\"\n                            onClick={this.sendClick} >\n                            -\n                        </p>\n                    </div>\n                </div>\n                <div id=\"session-label\">\n                    <h2 className=\"break-title\">Break</h2>\n                    <div className=\"config-container\">\n                        <p\n                            className=\"plus\"\n                            id=\"break-increment\"\n                            onClick={this.sendClick} >\n                            +\n                        </p>\n\n                        <p id=\"break-length\">{this.props.breakTime}</p>\n                        <p\n                            className=\"minus\"\n                            id=\"break-decrement\"\n                            onClick={this.sendClick}>\n                            -\n                        </p>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n\n}\n\nexport default Config;","import React from 'react';\nimport Clock from './components/Clock';\nimport Config from './components/Config';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      active: false,\n      onGoing: \"Session\",\n      sessionTime: 25,\n      breakTime: 5,\n      minutes: 25,\n      seconds: 0\n    }\n  }\n  intervalID = 0;\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    document.body.appendChild(script);\n  }\n  //reset to default\n  reset = () => {\n    clearInterval(this.intervalID)\n    this.setState({\n      onGoing: \"Session\",\n      active: false,\n      sessionTime: 25,\n      breakTime: 5,\n      minutes: 25,\n      seconds: 0\n    }, () => { this.stopAudio() })\n  }\n  //handlig time config\n  configTime = (childdata) => {\n    if (this.state.sessionTime < 60 && childdata === \"session-increment\") {\n      this.setState({\n        sessionTime: this.state.sessionTime + 1\n      }, () => (this.updateTime()))\n    }\n    else if (this.state.sessionTime > 1 && childdata === \"session-decrement\") {\n      this.setState({\n        sessionTime: this.state.sessionTime - 1\n      }, () => (this.updateTime()))\n    }\n    else if (this.state.breakTime < 60 && childdata === \"break-increment\") {\n      this.setState({\n        breakTime: this.state.breakTime + 1\n      }, () => (this.updateBreakTime()))\n    }\n    else if (this.state.breakTime > 1 && childdata === \"break-decrement\") {\n      this.setState({\n        breakTime: this.state.breakTime - 1\n      }, () => (this.updateBreakTime()))\n    }\n  }\n  //updating session time\n  updateTime = () => {\n    if (this.state.onGoing === \"Break\") { }\n    else {\n      if (this.state.active === false) {\n        this.setState({\n          minutes: this.state.sessionTime\n        })\n      }\n    }\n  }\n  //updating break time\n  updateBreakTime = () => {\n    if (this.state.onGoing === \"Session\") { }\n    else {\n      if (this.state.active === false) {\n        this.setState({\n          minutes: this.state.breakTime\n        })\n      }\n    }\n  }\n  //main funckion loopin session and breaks\n  startStop = () => {\n    //session timing\n    let sesionInter = () => {\n      //min tick \n      if (this.state.seconds === 0) {\n        this.setState({\n          minutes: this.state.minutes - 1,\n          seconds: 60\n        })\n      }\n      //second tick\n      this.setState({\n        seconds: this.state.seconds - 1\n      }, () => {\n        //starting break after session ends\n        if (this.state.minutes === -1 && this.state.seconds === 59) {\n          clearInterval(this.intervalID)\n          this.playAudio()\n          this.intervalID = setInterval(breakInter, 1000)\n          this.setState({\n            onGoing: \"Break\",\n            seconds: 0,\n            minutes: this.state.breakTime\n          }, () => { this.playAudio() })\n        }\n      })\n    }\n    //break timing\n    let breakInter = () => {\n      if (this.state.seconds === 0) {\n        //minute tick\n        this.setState({\n          minutes: this.state.minutes - 1,\n          seconds: 60\n        })\n      }\n      //second tick\n      this.setState({\n        seconds: this.state.seconds - 1\n      }, () => {\n        //ending break \n        if (this.state.minutes === -1 && this.state.seconds === 59) {\n          console.log('end of break')\n          clearInterval(this.intervalID)\n          this.intervalID = setInterval(sesionInter, 1000)\n          this.setState({\n            onGoing: \"Session\",\n            minutes: this.state.sessionTime,\n            seconds: 0\n          })\n        }\n      })\n\n    }\n    //ticking ON OFF\n    if (this.state.active === false) {\n      this.intervalID = setInterval(sesionInter, 1000)\n      this.setState({\n        active: !this.state.active\n      }, () => { console.log(\"ON\") });\n    }\n    else if (this.state.active === true) {\n      clearInterval(this.intervalID)\n      this.setState({\n        active: !this.state.active\n      }, () => { console.log(\"OFF\") });\n    }\n  }\n  // play auido\n  playAudio = () => {\n    let audio = document.getElementById('beep');\n    audio.play();\n  }\n  // stop auido\n  stopAudio = () => {\n    let audio = document.getElementById('beep');\n    if (audio.duration > 0 && !audio.paused) {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Config\n          configSession={this.configTime}\n          sessionTime={this.state.sessionTime}\n          breakTime={this.state.breakTime} />\n        <Clock\n          onGoing={this.state.onGoing}\n          reset={this.reset}\n          startStop={this.startStop}\n          min={this.state.minutes}\n          sec={this.state.seconds} />\n        <audio id=\"beep\" preload=\"auto\"\n          src=\"https://goo.gl/65cBl1\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}